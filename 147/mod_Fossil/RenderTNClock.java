// Date: 2011/12/1309:55:05
// Java generated by Techne
// This is the first stage to more output options
// and therefore a very basic Render-File
// I hope it will be useful, in any case, leave
// feedback so I can improve on it
// - ZeuX
package mod_Fossil;

import java.util.Calendar;

import net.minecraft.client.renderer.tileentity.TileEntitySpecialRenderer;
import net.minecraft.tileentity.TileEntity;
import net.minecraft.util.MathHelper;

import org.lwjgl.opengl.GL11;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;

@SideOnly(Side.CLIENT)
public class RenderTNClock extends TileEntitySpecialRenderer
{
    private ModelTNClock MainModel;
    private int UpdateTick = 0;
    private final int TickReset = 600;
    private float Hour = 0;
    private float Minute = 0;
    private Calendar TimeCheck;
    public final float RndRound = (float)Math.PI * 2;
    public RenderTNClock()
    {
        MainModel = new ModelTNClock();
    }

    public void renderTileEntityEnchantmentTableAt(TileEntityTimeMachine tileentityTimeMachine, double d, double d1, double d2,
            float f)
    {
        GL11.glPushMatrix();
        GL11.glTranslatef((float)d + 0.5F, (float)d1 + 0.75F, (float)d2 + 0.5F);
        float f1 = (float)tileentityTimeMachine.field_40068_a + f;
        GL11.glTranslatef(0.0F, 0.5F + MathHelper.sin(f1 * 0.1F) * 0.01F, 0.0F);
        float f2;

        for (f2 = tileentityTimeMachine.CurrectFacingAngle - tileentityTimeMachine.SendingCurrentFacing; f2 >= (float)Math.PI; f2 -= ((float)Math.PI * 2F)) { }

        for (; f2 < -(float)Math.PI; f2 += ((float)Math.PI * 2F)) { }

        float f3 = tileentityTimeMachine.SendingCurrentFacing + f2 * f;
        GL11.glRotatef((-f3 * 180F) / (float)Math.PI, 0.0F, 1.0F, 0.0F);
        GL11.glRotatef(180F, 0.0F, 0.0F, 1.0F);
        bindTextureByName("/TimeMachine/TNClock.png");
        float f4 = 0;
        float f5 = 0;
        f4 = (f4 - (float)MathHelper.truncateDoubleToInt(f4)) * 1.6F - 0.3F;
        f5 = (f5 - (float)MathHelper.truncateDoubleToInt(f5)) * 1.6F - 0.3F;

        if (f4 < 0.0F)
        {
            f4 = 0.0F;
        }

        if (f5 < 0.0F)
        {
            f5 = 0.0F;
        }

        if (f4 > 1.0F)
        {
            f4 = 1.0F;
        }

        if (f5 > 1.0F)
        {
            f5 = 1.0F;
        }

        float f6 = 0;
        ModelTNClock Clock = (ModelTNClock)MainModel;

        if (!tileentityTimeMachine.isRestoring)
        {
            showRealTime(Clock);
        }
        else
        {
            showProgress(Clock, tileentityTimeMachine);
        }

        if (tileentityTimeMachine.PlayerClosing)
        {
            Clock.EdgeRotate(f1, 0.5F, f5, f6, 0.0F, 0.0625F);
        }
        else
        {
            Clock.EdgePullBack();
        }

        MainModel.render(null, f1, 0.5F, f5, f6, 0.0F, 0.0625F);
        GL11.glPopMatrix();
    }

    private void showProgress(ModelTNClock clock, TileEntityTimeMachine TMInstance)
    {
        clock.UpdateTime(0, ((float)TMInstance.getChargeLevel() / (float)TMInstance.MAX_CHARGED) * RndRound);
    }

    public void renderTileEntityAt(TileEntity tileentity, double d, double d1, double d2,
            float f)
    {
        renderTileEntityEnchantmentTableAt((TileEntityTimeMachine)tileentity, d, d1, d2, f);
    }
    public void showRealTime(ModelTNClock Clock)
    {
        if (UpdateTick == 0)
        {
            TimeCheck = Calendar.getInstance();
            Hour = (float)(TimeCheck.get(Calendar.HOUR));
            Minute = (float)(TimeCheck.get(Calendar.MINUTE));
            UpdateTick = TickReset;
            Clock.UpdateTime((float)((Hour / 12) * RndRound), (float)((Minute / 60) * RndRound));
        }
        else
        {
            UpdateTick--;
        }
    }
}
